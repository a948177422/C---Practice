#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

class Solution {
public:
	double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
		typedef vector<int>::size_type vec_sz;
		vec_sz len1_origin = nums1.size();
		vec_sz len2_origin = nums2.size();
		vec_sz len3 = len1_origin + len2_origin;
		vec_sz len1 = len1_origin;
		vec_sz len2 = len2_origin;

		vector<int> vec_res(len3);

		if(len1 == 0){
			nums1.push_back(0);
			len1++;
		}
		if(len2 == 0){
			nums2.push_back(0);
			len2++;
		}

		while(len1 != 0 && len2 != 0){
			if(nums1[len1 - 1] > nums2[len2 - 1]){
				vec_res[len3 -1] = nums1[len1 -1];
				len1--;
				len3--;
			}
			else{
				vec_res[len3 - 1] = nums2[len2 - 1];
				len2--;
				len3--;
			}
		}

		if (len1_origin != 0 && len2_origin != 0)
		{
			while(len1 != 0){
				vec_res[len3 - 1] = nums1[len1 - 1];
				len1--;
				len3--;
			}
			while(len2 != 0){
				vec_res[len3 - 1] = nums2[len2 - 1];
				len2--;
				len3--;
			}
		}

		/*************
			原始版本
		**************/
		/*
		typedef vector<int>::size_type vec_sz;
		vec_sz len1 = nums1.size();
		vec_sz len2 = nums2.size();
		vec_sz len3 = len1 + len2;

		vector<int> vec_res(len3);

		if(len1 == 0){
			nums1.push_back(0);
			len1++;
		}
		if(len2 == 0){
			nums2.push_back(0);
			len2++;
		}

		while(len1 != 0){
			if(nums1[len1 - 1] > nums2[len2 - 1]){
				vec_res[len3 -1] = nums1[len1 -1];
				len1--;
				len3--;
			}
			else{
				vec_res[len3 - 1] = nums2[len2 - 1];
				len2--;
				len3--;
			}
		}

		while(len2 != 0){
			vec_res[len3 - 1] = nums2[len2 - 1];
			len2--;
			len3--;
		}
		return len3%2 == 0 ? (vec_res[vec_res.size() / 2] + vec_res[vec_res.size() / 2 + 1]) / 2 : vec_res[vec_res.size() / 2 + 1];
		*/
		return vec_res.size()%2 == 0 ? ((double)vec_res[vec_res.size() / 2] + (double)vec_res[vec_res.size() / 2 - 1]) / 2 : (double)vec_res[vec_res.size() / 2];
	}


	//==========================================================================================================
		
	//==========================================================================================================
#if 1
	int maxArea(vector<int>& height) {
		vector<int> vec_area;
		vector<int>::iterator iter_flag = height.begin();
		int res = 0;
	/****************
		版本1;
	****************/
#if 0
		for(vector<int>::iterator iter = height.begin(); iter != height.end(); iter++){
			if(*iter != 0){            
				for(vector<int>::iterator iter_1 = iter + 1; iter_1 != height.end(); iter_1++){
					if(*iter < *iter_1)
						vec_area.push_back(distance(iter, iter_1) * (*iter));
					else 
						vec_area.push_back(distance(iter, iter_1) * (*iter_1));
				}
			}
			else
				continue;            
		}       

#endif


	/**********************
		版本2;(通过) 29ms
	***********************/
#if 0
		for(vector<int>::iterator iter = height.begin(); iter != height.end(); iter++){
			if(*iter != 0 && *iter >= *iter_flag){    

				vector<int>::iterator iter_flag_last = height.end() - 1;

				for(vector<int>::iterator iter_1 = height.end() - 1; iter_1 != iter; iter_1--){
					if(*iter <= *iter_1){
						vec_area.push_back(distance(iter, iter_1) * (*iter));
						break;
					}
					else if(*iter_1 >= *iter_flag_last){
						vec_area.push_back(distance(iter, iter_1) * (*iter_1));
						iter_flag_last = iter_1;
					}
				}

				iter_flag = iter;
			}          
		}

		if(vec_area.size() != 0){
			sort(vec_area.begin(), vec_area.end());

			return vec_area[vec_area.size() - 1];
		}
		else
			return 0;

#endif
		
	/************************
		版本2.1;(通过) 19ms
	*************************/
#if 0
		for(vector<int>::iterator iter = height.begin(); iter != height.end(); iter++){
			if(*iter != 0 && *iter >= *iter_flag){    

				vector<int>::iterator iter_flag_last = height.end() - 1;

				for(vector<int>::iterator iter_1 = height.end() - 1; iter_1 != iter; iter_1--){
					if(*iter <= *iter_1){
						if(distance(iter, iter_1) * (*iter) > res)
							res = distance(iter, iter_1) * (*iter);
						break;
					}
					else if(*iter_1 >= *iter_flag_last){
						if(distance(iter, iter_1) * (*iter_1) > res)
							res = distance(iter, iter_1) * (*iter_1);
						iter_flag_last = iter_1;
					}
				}

				iter_flag = iter;
			}          
		}

		return res;
#endif

#if 0
		vector<int> my_height(height);
		sort(my_height.begin(), my_height.end());

		for(vector<int>::iterator iter = my_height.begin(); iter != my_height.end(); iter++){
			if(*iter != 0){            
					int width = abs(distance(find(height.begin(), height.end(), *iter), find(height.begin(), height.end(), *(iter + 1))));
					vec_area.push_back(width * (*iter));
			}
			else
				continue;            
		}
#endif


	}
#endif
	//==========================================================================================================

	//==========================================================================================================
	vector<vector<int>> threeSum(vector<int>& nums) {

		vector<int> m_nums(nums);
		sort.(m_nums.begin(), m_nums.end());
		bool is_zero_exist = false;     
		vector<vector<int>> vec_ret;
		typedef vector<int>::iterator vec_it;

		vector<int>::iterator iter_0 = find(m_nums.begin(), m_nums.end(), 0);
		if(iter_0 != m_nums.end()){            
			vector<int> vec_neg_nums(m_nums.begin(), m_nums.begin() + iter_0 - 1);
			vector<int> vec_pos_nums(m_nums.begin() + iter_0 + 1, m_nums.end() - 1);
			is_zero_exist = true;

			for(vec_it iter_neg = vec_neg_nums.begin(); iter_neg != vec_neg_nums.end(); iter_neg++){
				for(vec_it iter_pos = vec_pos_nums.begin(); iter_pos != vec_pos_nums.end(); iter_pos++){
					if(*iter_neg + *iter_pos > 0){
						vec_it iter_target = find(vec_pos_nums.begin(), vec_pos_nums.end(), -(*iter_neg + *iter_pos));
					}
				}
			}
		}
	}


};


int main()
{
	//int nums_1[] = {};
	int nums_2[] = {-3,1,5};

	vector<int> vec_num_1;
	//vector<int> vec_num_1(nums_1, nums_1 + sizeof(nums_1)/sizeof(nums_1[0]));
	vector<int> vec_num_2(nums_2, nums_2 + sizeof(nums_2)/sizeof(nums_2[0]));

	double res;

	Solution foo;

	res = foo.findMedianSortedArrays(vec_num_1, vec_num_2);
	/*
	int nums_3[] = {28,342,418,485,719,670,878,752,662,994,654,504,929,660,424,855,922,744,600,229,728,
		33,371,863,561,772,271,178,455,449,426,835,143,845,321,214,867,199,967,881,193,973,386,122,633,
		810,330,907,906,282,136,986,315,860,849,229,632,473,759,87,922,185,922,418,382,243,632,250,795,
		599,131,988,924,869,463,558,680,145,465,938,427,954,925,94,814,126,323,798,599,434,885,874,620,
		159,292,354,755,924,956,550,876,88,890,800,309,705,358,989,850,176,280,629,130,205,724,296,331,
		399,94,283,186,331,157,806,490,801,512,597,725,469,499,601,909,390,754,218,447,112,560,298,640,
		840,279,122,397,355,418,80,755,864,363,293,195,872,451,38,673,963,635,751,432,487,352,341,229,
		458,912,676,923,472,326,563,312,606,686,709,313,456,789,420,321,505,713,868,377,164,258,403,128,
		246,154,912,733,858,606,962,317,518,990,240,990,317,803,302,275,841,363,588,650,504,9,323,9,74,
		191,387,239,450,790,367,48,944,279,781,802,885,743,471,755,85,711,745,402,867,399,29,708,762,970,
		710,267,331,33,276,405,577,15,644,379,157,363,427,453,995,208,608,232,303,79,988,388,791,733,143,
		658,133,524,718,247,846,429,514,529,814,143,935,743,510,931,122,668,647,901,473,642,461,81,874,764,
		513,214,505,304,948,0,314,433,876,384,680,75,165,547,604,980,42,891,75,552,823,198,572,822,451,46,
		816,913,479,42,29,992,257,886,648,557,238,962,990,115,699,22,190,864,921,794,196,315,686,272,868,
		861,822,792,35,273,190,851,186,670,893,568,662,150,454,311,59,693,625,49,808,324,424,350,189,697,
		496,737,13,534,9,881,747,831,25,782,457,216,985,643,886,879,211,900,381,18,211,441,711,837,842,871,
		513,618,573,702,316,69,440,329,956,801,562,703,633,587,486,90,803,471,85,41,702,649,942,436,19,505,
		877,730,342,71,953,856,690,526,910,6,947,702,335,903,504,249,607,489,836,445,931,992,268,368,33,971/*,
		369,327,407,388,833,636,470,527,59,423,735,749,301,646,107,249,700,794,504,556,43,111,397,232,908,328,224,177,49,609,500,418,937,259,159,770,247,629,297,
		306,405,33,408,706,31,867,955,83,662,460,640,57,923,37,289,832,718,865,361,119,475,213,537,412,472,48,534,71,678,183,377,83,568,137,141,599,5,449,35,19,261,
		675,76,184,64,366,368,134,583,81,253,58,294,143,822,118,191,356,189,221,892,919,656,460,56,798,412,61,247,447,80,508,474,509,44,538,227,765,673,810,846,278,
		869,493,421,43,611,613,752,153,834,644,72,491,456,128,641,868,542,888,315,974,748,141,483,144,32,710,909,705,873,108,983,94,601,757,137,564,370,241,69,556,885,
		141,47,694,622,688,562,516,928,230,490,28,371,326,173,403,388,82,460,613,542,796,707,495,553,197,412,275,438,481,831,676,623,231,370,597,271,284,113,200,514,955,
		228,238,633,753,993,374,188,806,987,730,602,695,226,507,892,638,782,330,471,965,358,94,196,728,43,468,365,508,20,879,464,600,469,449,354,463,823,542,621,811,624,
		223,506,850,82,750,840,216,432,312,181,791,758,730,871,802,550,236,310,570,468,126,522,289,576,228,104,751,122,725,562,747,300,420,949,382,170,790,950,603,454,132,
		746,564,214,969,366,764,206,29,686,26,507,208,315,435,789,420,187,911,145,101,658,446,522,608,180,692,750,131,647,556,615,393,120,181,363,839,945,921,220,983,299,
		727,543,614,515,332,386,54,244,884,155,254,682,29,214,862,722,964,345,721,520,960,467,993,141,182,832,438,455,52,421,754,131,317,720,646,649,107,52,245,343,208,500,
		25,589,714,239,311,31,585,385,903,897,852,896,391,386,728,181,841,780,955,595,264,272,315,262,921,774,315,167,117,875,19,494,464,733,86,128,116,671,513,20,920,717,
		916,663,103,997,845,944,129,800,891,393,72,558,656,345,333,971,512,802,846,883,649,662,617,735,790,733,406,655,105,678,372,374,342,827,371,187,123,500,339,14,246,
		411,573,902,108,258,225,973,60,423,856,709,85,473,444,876,559,202,531,16,233,256,390,575,83,761,114,559,614,453,573,860,216,498,114,324,756,339,649,169,762,506,230,
		199,979,27,427,890,581,311,259,814,567,649,389,2,763,855,561,377,660,487,589,228,337,703,905,446,42,554,615,156,60,197,707,392,576,135,282,158,446,541,324,365,543,
		66,367,306,921,281,35,582,768,624,810,457,327,715,903,721,270,870,229,682,68,936,74,996,423,709,154,221,250,479,586,145,545,306,451,818,587,486,400,707,462,563,164,
		789,630,420,862,252,290,443,935,358,732,9,355,155,718,861,729,321,692,315,466,237,973,270,56,560,108,808,619,571,723,136,712,354,556,927,958,846,370,893,557,454,255,
		264,610,325,477,339,998,170,6,817,759,980,87,815,892,547,976,864,470,51,0,183,405,908,462,716,754,184,961,663,639,216,927,249,894,405,940,892,927,298,709,686,630,
		148,854,523,696,830,387,166,881,739,701,639,647,163,707,401,348,668,417,987,237,344,588,131,101,880,375,28,178,85,67,161,233,921,684,929,103,423,448,984,162,149,975,
		809,665,682,562,13,703,979,352,940,676,940,423,777,172,798,158,702,883,225,863,469,498,899,750,601,322,198,937,484,348,265,293,365,299,856,378,2,187,82,294,863,374,
		717,993,546,516,151,248,751,728,464,220,578,363,971,179,686,169,116,522,869,381,168,234,681,376,964,35,563,46,330,427,420,47,420,318,915,923,919,667,3,383,239,581,
		98,562,760,136,732,228,659,953,962,827,540,995,203,856,30,118,903,712,545,675,112,317,994,27,240,913,46,243,648,638,824,746,200,936,883,284,165,894,590,127,721,130,
		474,276,986,504,394,241,217,292,269,329,609,263,708,202,528,107,797,176,745,974,274,945,910,157,582,427,403,172,906,124,302,380,752,640,885,499,234,454,791,503,135,
		752,118,843,954,646,302,104,174,47,78,800,345,988,310,927,416,713,99,322,838,753,55,942,745,940,441,979,746,584,482,881,337,952,76,643,598,379,747,124,778,825,925};*/
	int nums_3[] = {0,2};
	vector<int> vec_num_3(nums_3, nums_3 + sizeof(nums_3)/sizeof(nums_3[0]));
	//sort(vec_num_3.begin(), vec_num_3.end());

	int res_1 = foo.maxArea(vec_num_3);

	int x;
	cin >> x;
}